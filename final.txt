1. Code Testing
	Analysis of the genetic algorithms's performance was done through a mixture of guesses and educated guesses. I created another method that would write out a CSV file to allow easy graphing of average and best fitness through generations, with the aim of >90% fitness at the end of 20 generations with an initial population of 200. I fixed the 'living' proportion to 0.1: this seemed to provide 'good enough' performance. I focused most of my optimization efforts on mutations. Having created a constant that would describe the expected proportion of children carrying a mutation, sampled over a uniform distribution, I measured the effect of mutation proportion on best and average fitness over time. I found that a mutation proportion of 0.3 generally resulted in a spike to 50% average fitness at around generation 4, gradually increasing to approximately 95%- above my original goal.
	My best evolved program provided a fitness of 1, having achieved this in the 8th generation. With some interesting spirals on program start if picobot is touching the right-hand wall, the program resolves to a vertical scanline pattern as seen in most human-written programs. The program is below:

0 NExx -> S 4
0 NxWx -> E 1
0 Nxxx -> W 2
0 xExS -> W 0
0 xExx -> S 2
0 xxWS -> N 4
0 xxWx -> E 2
0 xxxS -> W 3
0 xxxx -> S 0
1 NExx -> W 2
1 NxWx -> E 4
1 Nxxx -> E 3
1 xExS -> W 4
1 xExx -> S 3
1 xxWS -> E 4
1 xxWx -> N 4
1 xxxS -> W 3
1 xxxx -> E 0
2 NExx -> W 1
2 NxWx -> S 3
2 Nxxx -> E 2
2 xExS -> W 2
2 xExx -> N 4
2 xxWS -> E 3
2 xxWx -> S 0
2 xxxS -> N 4
2 xxxx -> N 0
3 NExx -> S 4
3 NxWx -> E 2
3 Nxxx -> S 0
3 xExS -> W 2
3 xExx -> W 1
3 xxWS -> N 2
3 xxWx -> S 0
3 xxxS -> N 3
3 xxxx -> N 4
4 NExx -> S 0
4 NxWx -> E 4
4 Nxxx -> W 3
4 xExS -> W 3
4 xExx -> S 1
4 xxWS -> N 4
4 xxWx -> N 4
4 xxxS -> N 4
4 xxxx -> N 3
